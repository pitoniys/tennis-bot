import telebot
from telebot import types
import random
import os
import time
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer

# === üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(TOKEN)

# === üìã –î–∞–Ω–Ω—ã–µ ===
players_by_date = {}   # —Å–ª–æ–≤–∞—Ä—å: –¥–∞—Ç–∞ ‚Üí [–∏–≥—Ä–æ–∫–∏]
pending_date = {}      # —Å–ª–æ–≤–∞—Ä—å: user_id ‚Üí True (–æ–∂–∏–¥–∞–µ–º –¥–∞—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)


# === üß© –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def send_date_message(chat_id, date_text):
    markup = types.InlineKeyboardMarkup()
    join_btn = types.InlineKeyboardButton("–ò–≥—Ä–∞—é üéæ", callback_data=f"join|{date_text}")
    show_btn = types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ üìã", callback_data=f"show|{date_text}")
    draw_btn = types.InlineKeyboardButton("–†–∞–Ω–¥–æ–º üé≤", callback_data=f"draw|{date_text}")
    markup.add(join_btn, show_btn, draw_btn)

    bot.send_message(
        chat_id,
        f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –¢–µ–Ω–Ω–∏—Å –≤ {date_text}!\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤.",
        reply_markup=markup
    )


# === üöÄ –ö–æ–º–∞–Ω–¥–∞ /start ===
@bot.message_handler(commands=['start'])
def start(message):
    # –†–∞–∑–¥–µ–ª—è–µ–º /start –∏ —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
    parts = message.text.split(maxsplit=1)

    if len(parts) > 1:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª /start —Å –¥–∞—Ç–æ–π
        date_text = parts[1].strip()
        if date_text not in players_by_date:
            players_by_date[date_text] = []
        send_date_message(message.chat.id, date_text)
    else:
        # –ï—Å–ª–∏ –¥–∞—Ç—É –Ω–µ —É–∫–∞–∑–∞–ª–∏ ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
        bot.send_message(
            message.chat.id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –¥–∞—Ç—É –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –∏–≥—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü—è—Ç–Ω–∏—Ü–∞ 25.10):"
        )
        pending_date[message.from_user.id] = True


# === üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é ===
@bot.message_handler(func=lambda m: pending_date.get(m.from_user.id))
def get_date(message):
    date_text = message.text.strip() if message.text else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"
    pending_date.pop(message.from_user.id, None)

    if date_text not in players_by_date:
        players_by_date[date_text] = []

    send_date_message(message.chat.id, date_text)


# === üéæ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    try:
        action, date_text = call.data.split("|", 1)
    except ValueError:
        bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    user = call.from_user.username or call.from_user.first_name
    players = players_by_date.setdefault(date_text, [])

    if action == "join":
        if user not in players:
            players.append(user)
            bot.answer_callback_query(call.id, f"{user} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ {date_text}!")
        else:
            bot.answer_callback_query(call.id, f"{user}, —Ç—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω üòâ")

    elif action == "show":
        if players:
            bot.send_message(
                call.message.chat.id,
                f"üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({date_text}):\n" + "\n".join(players)
            )
        else:
            bot.send_message(call.message.chat.id, f"–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ {date_text}.")

    elif action == "draw":
        if len(players) < 4:
            bot.send_message(call.message.chat.id, f"–ú–∞–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ {date_text}! –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 4.")
        else:
            selected = random.sample(players, 4)
            bot.send_message(
                call.message.chat.id,
                f"üéæ –°–µ–≥–æ–¥–Ω—è ({date_text}) –∏–≥—Ä–∞—é—Ç:\n" + "\n".join(selected)
            )


# === üåê –ú–∏–Ω–∏ HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (—á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞—Å—ã–ø–∞–ª) ===
class SimpleHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running")

def run_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("0.0.0.0", port), SimpleHandler)
    print(f"üåê Web server running on port {port}")
    server.serve_forever()

Thread(target=run_server, daemon=True).start()


# === ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ ===
if __name__ == "__main__":
    print("‚úÖ Starting bot... Waiting 3 seconds before polling to avoid conflicts.")
    time.sleep(3)
    try:
        print("ü§ñ Bot is running...")
        bot.polling(none_stop=True, interval=2, timeout=20)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")